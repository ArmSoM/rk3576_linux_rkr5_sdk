From d0dec7a2bad61e081f965e90e7a388ffddeb88da Mon Sep 17 00:00:00 2001
From: Jiajian Wu <jair.wu@rock-chips.com>
Date: Wed, 4 Dec 2024 11:06:06 +0800
Subject: [PATCH 13/22] fix(drm): support set resolution and fps

Signed-off-by: Jiajian Wu <jair.wu@rock-chips.com>
---
 src/drivers/display/drm/lv_linux_drm.c | 85 ++++++++++++++++++++------
 src/drivers/display/drm/lv_linux_drm.h |  2 +-
 2 files changed, 67 insertions(+), 20 deletions(-)

diff --git a/src/drivers/display/drm/lv_linux_drm.c b/src/drivers/display/drm/lv_linux_drm.c
index 5b6831ed2..fc944b992 100644
--- a/src/drivers/display/drm/lv_linux_drm.c
+++ b/src/drivers/display/drm/lv_linux_drm.c
@@ -64,6 +64,8 @@ typedef struct drm_bo {
 
 typedef struct drm_device {
     int fd;
+    int lcd_w;
+    int lcd_h;
 
     struct {
         int width;
@@ -92,6 +94,7 @@ typedef struct drm_device {
     char * drm_buff;
     lv_color_t * disp_buf;
     int disp_rot;
+    int disp_crop;
 
     int quit;
     pthread_t pid;
@@ -694,6 +697,26 @@ static void drm_free(drm_device_t * dev)
     dev->mode.vdisplay = 0;
 }
 
+static int32_t lv_env_get_u32(const char *name, uint32_t *value, uint32_t default_value)
+{
+    char *ptr = getenv(name);
+
+    if (NULL == ptr) {
+        *value = default_value;
+    } else {
+        char *endptr;
+        int base = (ptr[0] == '0' && ptr[1] == 'x') ? (16) : (10);
+        errno = 0;
+        *value = strtoul(ptr, &endptr, base);
+        if (errno || (ptr == endptr)) {
+            errno = 0;
+            *value = default_value;
+        }
+    }
+
+    return 0;
+}
+
 static int drm_setup(drm_device_t *dev)
 {
     drmModeConnectorPtr conn = NULL;
@@ -751,6 +774,13 @@ static int drm_setup(drm_device_t *dev)
                             DRM_FORMAT);
     if (crtc_bo)
     {
+        uint32_t fps;
+        lv_env_get_u32("lv_disp_fps", &fps, 0);
+        if (fps && (fps != dev->mode_info.vrefresh))
+        {
+            dev->mode_info.clock = dev->mode_info.clock * fps / dev->mode_info.vrefresh;
+            dev->mode_info.vrefresh = fps;
+        }
         memset(crtc_bo->ptr, 0x0, crtc_bo->size);
         ret = drmModeSetCrtc(dev->fd, dev->crtc_id, crtc_bo->fb_id, 0, 0,
                              dev->con_ids, dev->num_cons, &dev->mode_info);
@@ -850,15 +880,26 @@ static void setdrmdisp(drm_device_t* dev, drm_bo_t *bo)
 {
     int crtc_x, crtc_y, crtc_w, crtc_h;
     int ret;
-    int fb = bo->fb_id, sw = dev->mode.width, sh = dev->mode.height;
+    int fb = bo->fb_id, sw = dev->lcd_w, sh = dev->lcd_h;
 
     if (dev == NULL)
         return;
 
-    crtc_w = dev->mode.width;
-    crtc_h = dev->mode.height;
-    crtc_x = 0;
-    crtc_y = 0;
+    if (dev->disp_crop)
+    {
+        crtc_w = sw;
+        crtc_h = sh;
+        crtc_x = (dev->mode.width - sw) / 2;
+        crtc_y = (dev->mode.height - sh) / 2;
+    }
+    else
+    {
+        /* Fullscreen */
+        crtc_w = dev->mode.width;
+        crtc_h = dev->mode.height;
+        crtc_x = 0;
+        crtc_y = 0;
+    }
 
     LV_LOG_TRACE("Display bo %d(%dx%d) at (%d,%d) %dx%d", fb, sw, sh,
                  crtc_x, crtc_y, crtc_w, crtc_h);
@@ -1028,11 +1069,11 @@ static void *drm_thread(void *arg)
             }
             drm_overlay(dev, bo);
 #else
-            for (int i = 0; i < dev->mode.height; i++)
+            for (int i = 0; i < dev->lcd_h; i++)
             {
                 memcpy(bo->ptr + i * bo->pitch,
                        dev->drm_buff + i * dev->lcd_sw * (LV_COLOR_DEPTH >> 3),
-                       dev->mode.width * (LV_COLOR_DEPTH >> 3));
+                       bo->pitch);
             }
 #endif
             setdrmdisp(dev, bo);
@@ -1074,13 +1115,13 @@ static void drm_buffer_setup(drm_device_t * dev)
 
     if ((dev->disp_rot == 0) || (dev->disp_rot == 180))
     {
-        buf_w = dev->mode.width;
-        buf_h = dev->mode.height;
+        buf_w = dev->lcd_w;
+        buf_h = dev->lcd_h;
     }
     else
     {
-        buf_w = dev->mode.height;
-        buf_h = dev->mode.width;
+        buf_w = dev->lcd_w;
+        buf_h = dev->lcd_h;
     }
 #if LV_DRM_USE_RGA
     dev->gbo = malloc_drm_bo(dev, buf_w, buf_h, DRM_FORMAT);
@@ -1091,10 +1132,8 @@ static void drm_buffer_setup(drm_device_t * dev)
     dev->drm_buff = malloc(buf_w * buf_h * (LV_COLOR_DEPTH >> 3));
     dev->lcd_sw = buf_w;
 #endif
-    dev->vop_buf[0] = malloc_drm_bo(dev, dev->mode.width, dev->mode.height,
-                                    DRM_FORMAT);
-    dev->vop_buf[1] = malloc_drm_bo(dev, dev->mode.width, dev->mode.height,
-                                    DRM_FORMAT);
+    dev->vop_buf[0] = malloc_drm_bo(dev, dev->lcd_w, dev->lcd_h, DRM_FORMAT);
+    dev->vop_buf[1] = malloc_drm_bo(dev, dev->lcd_w, dev->lcd_h, DRM_FORMAT);
     LV_LOG_USER("DRM subsystem and buffer mapped successfully");
 }
 
@@ -1110,7 +1149,7 @@ static void drm_buffer_destroy(drm_device_t * dev)
     free_drm_bo(dev, dev->vop_buf[1]);
 }
 
-lv_display_t * lv_drm_disp_create(int rot)
+lv_display_t * lv_drm_disp_create(int hor_res, int ver_res, int rot)
 {
     lv_display_t * disp;
 
@@ -1120,19 +1159,27 @@ lv_display_t * lv_drm_disp_create(int rot)
 #if LV_DRM_USE_RGA
     dev->disp_rot = rot;
 #endif
+    lv_env_get_u32("lv_disp_width", &dev->lcd_w, hor_res);
+    lv_env_get_u32("lv_disp_height", &dev->lcd_h, ver_res);
+    lv_env_get_u32("lv_disp_crop", &dev->disp_crop, 0);
+    if (!dev->lcd_w)
+        dev->lcd_w = dev->mode.width;
+    if (!dev->lcd_h)
+        dev->lcd_h = dev->mode.height;
+
     drm_buffer_setup(dev);
 
     if ((dev->disp_rot == 0) || (dev->disp_rot == 180))
-        disp = lv_display_create(dev->mode.width, dev->mode.height);
+        disp = lv_display_create(dev->lcd_w, dev->lcd_h);
     else
-        disp = lv_display_create(dev->mode.height, dev->mode.width);
+        disp = lv_display_create(dev->lcd_h, dev->lcd_w);
 
     if (disp == NULL) {
         LV_LOG_ERROR("lv_display_create failed");
         return NULL;
     }
 
-    int size = dev->mode.width * dev->mode.height * (LV_COLOR_DEPTH >> 3);
+    int size = dev->lcd_w * dev->lcd_h * (LV_COLOR_DEPTH >> 3);
     dev->disp_buf = lv_malloc(size);
     lv_display_set_driver_data(disp, dev);
     lv_display_set_flush_cb(disp, drm_flush);
diff --git a/src/drivers/display/drm/lv_linux_drm.h b/src/drivers/display/drm/lv_linux_drm.h
index 916b536a0..c06d0eb79 100644
--- a/src/drivers/display/drm/lv_linux_drm.h
+++ b/src/drivers/display/drm/lv_linux_drm.h
@@ -37,7 +37,7 @@ extern "C" {
 /**********************
  * GLOBAL PROTOTYPES
  **********************/
-lv_display_t * lv_drm_disp_create(int rot);
+lv_display_t * lv_drm_disp_create(int hor_res, int ver_res, int rot);
 int lv_drm_disp_delete(lv_display_t * disp);
 
 /**********************
-- 
2.25.1

